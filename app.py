import re
import streamlit as st
import unicodedata
st.set_page_config(page_title="Luy·ªán 12 th√¨ Ti·∫øng Anh", page_icon="üìò", layout="centered")


def norm(s: str) -> str:
 
    s = s.lower().strip()
    s = unicodedata.normalize("NFC", s)
    s = re.sub(r"[^\w\s]", "", s)  
    return s

def any_match(text: str, patterns):
    t = norm(text)
    for p in patterns:
        if re.search(p, t):
            return True
    return False


IRREG = [
    ("go", "went", "gone"), ("eat", "ate", "eaten"), ("see", "saw", "seen"),
    ("write", "wrote", "written"), ("begin", "began", "begun"), ("come", "came", "come"),
    ("drink", "drank", "drunk"), ("sing", "sang", "sung"), ("swim", "swam", "swum"),
    ("run", "ran", "run"), ("speak", "spoke", "spoken"), ("take", "took", "taken"),
    ("give", "gave", "given"), ("drive", "drove", "driven"), ("break", "broke", "broken"),
    ("choose", "chose", "chosen"), ("forget", "forgot", "forgotten"), ("freeze", "froze", "frozen"),
    ("ride", "rode", "ridden"), ("fall", "fell", "fallen"), ("grow", "grew", "grown"),
    ("know", "knew", "known"), ("fly", "flew", "flown"), ("blow", "blew", "blown"),
    ("draw", "drew", "drawn"), ("show", "showed", "shown"), ("throw", "threw", "thrown"),
    ("wear", "wore", "worn"), ("tear", "tore", "torn"), ("ring", "rang", "rung"),
    ("get", "got", "gotten"), ("have", "had", "had"), ("be", "was/were", "been"),
    ("make", "made", "made"), ("say", "said", "said"), ("sell", "sold", "sold"),
    ("send", "sent", "sent"), ("set", "set", "set"), ("think", "thought", "thought"),
]
V2_SET = set(v2 for _, v2, _ in IRREG)
V3_SET = set(v3 for _, _, v3 in IRREG)


def validate_example(tense_key: str, group: str, form: str, sent: str):
    """
    tense_key: m√£ th√¨ n·ªôi b·ªô (present_simple, past_continuous, ...)
    group: 'verb' | 'tobe'
    form: 'Kh·∫≥ng ƒë·ªãnh' | 'Ph·ªß ƒë·ªãnh' | 'Nghi v·∫•n'
    sent: c√¢u v√≠ d·ª• ng∆∞·ªùi d√πng nh·∫≠p
    """
    s = norm(sent)

    # C√°c regex ti·ªán l·ª£i
    BE_NOW = r"\b(am|is|are)\b"
    BE_PAST = r"\b(was|were)\b"
    DO_NOW = r"\b(do|does)\b"
    DID = r"\b(did)\b"
    HAVE_NOW = r"\b(have|has)\b"
    HAD = r"\b(had)\b"
    WILL = r"\b(will|shall)\b"
    BEEN = r"\bbeen\b"
    V_ING = r"\b\w+ing\b"
    V_ED = r"\b\w+ed\b"
    V3_END = r"\b\w+(ed|en|wn)\b"  # g·∫ßn ƒë√∫ng
    NEG = r"\b(not|n't)\b"

    # m·ªôt v√†i b·ªô nh·∫≠n di·ªán nhanh
    def has_any_v2_or_ed():
        return bool(re.search(V_ED, s) or any(w in s.split() for w in V2_SET))

    def has_any_v3():
        return bool(re.search(V3_END, s) or any(w in s.split() for w in V3_SET) or "been" in s)

    # M·ªói th√¨: ƒë·∫∑t c√°c quy t·∫Øc "ƒëi·ªÉn h√¨nh" (affirm/neg/question)
    ok = False
    hint = ""  

    # ---- HI·ªÜN T·∫†I ƒê∆†N
    if tense_key == "present_simple":
        if group == "verb":
            if form == "Kh·∫≥ng ƒë·ªãnh":
                # Kh√¥ng c√≥ will/ have/ has/ had/ was/were/ am/is/are/ did, kh√¥ng V-ing; cho ph√©p ƒë·ªông t·ª´ V/Vs
                ok = (not any_match(s, [WILL, HAVE_NOW, HAD, BE_PAST, BE_NOW, DID]) and not re.search(V_ING, s))
                hint = "Tr√°nh d√πng tr·ª£ ƒë·ªông t·ª´; d√πng V/ V(s/es)."
            elif form == "Ph·ªß ƒë·ªãnh":
                ok = any_match(s, [r"\bdo not\b", r"\bdoes not\b", r"\bdon't\b", r"\bdoesn't\b"])
                hint = "D√πng do/does not + V."
            else:  # Nghi v·∫•n
                ok = re.match(r"^(do|does)\b", s or "") is not None
                hint = "B·∫Øt ƒë·∫ßu b·∫±ng Do/Does + S + V?"
        else:  # tobe
            if form == "Kh·∫≥ng ƒë·ªãnh":
                ok = any_match(s, [BE_NOW])
                hint = "D√πng am/is/are."
            elif form == "Ph·ªß ƒë·ªãnh":
                ok = any_match(s, [r"\bam not\b", r"\bis not\b", r"\bare not\b", r"\bisn't\b", r"\baren't\b"])
                hint = "D√πng am/is/are + not."
            else:
                ok = re.match(r"^(am|is|are)\b", s or "") is not None
                hint = "B·∫Øt ƒë·∫ßu b·∫±ng Am/Is/Are + S?"

    # ---- HI·ªÜN T·∫†I TI·∫æP DI·ªÑN
    elif tense_key == "present_continuous":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [BE_NOW]) and re.search(V_ING, s)
            hint = "am/is/are + V-ing."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bam not\b.*"+V_ING, r"\bis not\b.*"+V_ING, r"\bare not\b.*"+V_ING,
                               r"\bisn't\b.*"+V_ING, r"\baren't\b.*"+V_ING])
            hint = "am/is/are + not + V-ing."
        else:
            ok = re.match(r"^(am|is|are)\b.*\b\w+ing\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Am/Is/Are + S + V-ing?"

    # ---- HI·ªÜN T·∫†I HO√ÄN TH√ÄNH
    elif tense_key == "present_perfect":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [HAVE_NOW]) and has_any_v3()
            hint = "have/has + V3."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bhave not\b.*"+V3_END, r"\bhas not\b.*"+V3_END, r"\bhaven't\b.*", r"\bhasn't\b.*"]) and has_any_v3()
            hint = "have/has + not + V3."
        else:
            ok = re.match(r"^(have|has)\b.*\b\w+(ed|en|wn)\b", s or "") is not None or \
                 re.match(r"^(have|has)\b.*\b(" + "|".join(map(re.escape, V3_SET)) + r")\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Have/Has + S + V3?"

    # ---- HI·ªÜN T·∫†I HO√ÄN TH√ÄNH TI·∫æP DI·ªÑN
    elif tense_key == "present_perfect_continuous":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [HAVE_NOW]) and "been" in s and re.search(V_ING, s)
            hint = "have/has been + V-ing."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bhave not been\b.*"+V_ING, r"\bhas not been\b.*"+V_ING,
                               r"\bhaven't been\b.*"+V_ING, r"\bhasn't been\b.*"+V_ING])
            hint = "have/has + not + been + V-ing."
        else:
            ok = re.match(r"^(have|has)\b.*\bbeen\b.*\b\w+ing\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Have/Has + S + been + V-ing?"

    # ---- QU√Å KH·ª® ƒê∆†N
    elif tense_key == "past_simple":
        if group == "verb":
            if form == "Kh·∫≥ng ƒë·ªãnh":
                ok = has_any_v2_or_ed()
                hint = "D√πng V2/ Ved."
            elif form == "Ph·ªß ƒë·ªãnh":
                ok = any_match(s, [r"\bdid not\b", r"\bdidn't\b"]) and not has_any_v2_or_ed()
                hint = "did not + V (nguy√™n m·∫´u)."
            else:
                ok = re.match(r"^did\b", s or "") is not None
                hint = "B·∫Øt ƒë·∫ßu b·∫±ng Did + S + V?"
        else:  # to be
            if form == "Kh·∫≥ng ƒë·ªãnh":
                ok = any_match(s, [BE_PAST])
                hint = "D√πng was/were."
            elif form == "Ph·ªß ƒë·ªãnh":
                ok = any_match(s, [r"\bwas not\b", r"\bwere not\b", r"\bwasn't\b", r"\bweren't\b"])
                hint = "was/were + not."
            else:
                ok = re.match(r"^(was|were)\b", s or "") is not None
                hint = "B·∫Øt ƒë·∫ßu b·∫±ng Was/Were + S?"

    # ---- QU√Å KH·ª® TI·∫æP DI·ªÑN
    elif tense_key == "past_continuous":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [BE_PAST]) and re.search(V_ING, s)
            hint = "was/were + V-ing."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bwas not\b.*"+V_ING, r"\bwere not\b.*"+V_ING, r"\bwasn't\b.*"+V_ING, r"\bweren't\b.*"+V_ING])
            hint = "was/were + not + V-ing."
        else:
            ok = re.match(r"^(was|were)\b.*\b\w+ing\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Was/Were + S + V-ing?"

    # ---- QU√Å KH·ª® HO√ÄN TH√ÄNH
    elif tense_key == "past_perfect":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [HAD]) and has_any_v3()
            hint = "had + V3."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bhad not\b.*"+V3_END, r"\bhadn't\b.*"]) and has_any_v3()
            hint = "had not + V3."
        else:
            ok = re.match(r"^had\b.*\b\w+(ed|en|wn)\b", s or "") is not None or re.match(r"^had\b.*\b(" + "|".join(map(re.escape, V3_SET)) + r")\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Had + S + V3?"

    # ---- QU√Å KH·ª® HO√ÄN TH√ÄNH TI·∫æP DI·ªÑN
    elif tense_key == "past_perfect_continuous":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [HAD]) and "been" in s and re.search(V_ING, s)
            hint = "had been + V-ing."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bhad not been\b.*"+V_ING, r"\bhadn't been\b.*"+V_ING])
            hint = "had not been + V-ing."
        else:
            ok = re.match(r"^had\b.*\bbeen\b.*\b\w+ing\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Had + S + been + V-ing?"

    # ---- T∆Ø∆†NG LAI ƒê∆†N
    elif tense_key == "future_simple":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = any_match(s, [WILL]) and "will have" not in s and "will be" not in s
            hint = "will + V (nguy√™n m·∫´u)."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bwill not\b", r"\bwon't\b"])
            hint = "will not + V."
        else:
            ok = re.match(r"^(will|shall)\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Will/Shall + S + V?"

    # ---- T∆Ø∆†NG LAI TI·∫æP DI·ªÑN
    elif tense_key == "future_continuous":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = "will be" in s and re.search(V_ING, s)
            hint = "will be + V-ing."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bwill not be\b.*"+V_ING, r"\bwon't be\b.*"+V_ING])
            hint = "will not be + V-ing."
        else:
            ok = re.match(r"^(will|shall)\b.*\bbe\b.*\b\w+ing\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Will + S + be + V-ing?"

    # ---- T∆Ø∆†NG LAI HO√ÄN TH√ÄNH
    elif tense_key == "future_perfect":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = "will have" in s and has_any_v3()
            hint = "will have + V3."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bwill not have\b.*"+V3_END, r"\bwon't have\b.*"+V3_END]) or ("will not have" in s and has_any_v3())
            hint = "will not have + V3."
        else:
            ok = re.match(r"^(will|shall)\b.*\bhave\b.*\b\w+(ed|en|wn)\b", s or "") is not None or \
                 re.match(r"^(will|shall)\b.*\bhave\b.*\b(" + "|".join(map(re.escape, V3_SET)) + r")\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Will + S + have + V3?"

    # ---- T∆Ø∆†NG LAI HO√ÄN TH√ÄNH TI·∫æP DI·ªÑN
    elif tense_key == "future_perfect_continuous":
        if form == "Kh·∫≥ng ƒë·ªãnh":
            ok = "will have been" in s and re.search(V_ING, s)
            hint = "will have been + V-ing."
        elif form == "Ph·ªß ƒë·ªãnh":
            ok = any_match(s, [r"\bwill not have been\b.*"+V_ING, r"\bwon't have been\b.*"+V_ING])
            hint = "will not have been + V-ing."
        else:
            ok = re.match(r"^(will|shall)\b.*\bhave been\b.*\b\w+ing\b", s or "") is not None
            hint = "B·∫Øt ƒë·∫ßu b·∫±ng Will + S + have been + V-ing?"

    return ok, hint

# ==========================
# D·ªÆ LI·ªÜU 12 TH√å (t√≥m t·∫Øt ‚Äì VN tr∆∞·ªõc, EN trong ngo·∫∑c)
# ==========================
TENSES = {
    "Hi·ªán t·∫°i ƒë∆°n (Present Simple)": {
        "key": "present_simple",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + V(s/es)",
                "Ph·ªß ƒë·ªãnh": "S + do/does not + V",
                "Nghi v·∫•n": "Do/Does + S + V ?"
            },
            "ƒê·ªông t·ª´ to be (To be)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + am/is/are",
                "Ph·ªß ƒë·ªãnh": "S + am/is/are + not",
                "Nghi v·∫•n": "Am/Is/Are + S ?"
            },
        },
        "uses": [
            "Di·ªÖn t·∫£ th√≥i quen, s·ª± th·∫≠t hi·ªÉn nhi√™n (Habits, general truths)",
            "L·ªãch tr√¨nh, th·ªùi gian bi·ªÉu (Schedules, timetables)"
        ],
        "signals": ["always", "often", "usually", "sometimes", "every day"]
    },
    "Hi·ªán t·∫°i ti·∫øp di·ªÖn (Present Continuous)": {
        "key": "present_continuous",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + am/is/are + V-ing",
                "Ph·ªß ƒë·ªãnh": "S + am/is/are + not + V-ing",
                "Nghi v·∫•n": "Am/Is/Are + S + V-ing ?"
            }
        },
        "uses": [
            "H√†nh ƒë·ªông ƒëang x·∫£y ra (Action happening now)",
            "S·ª± vi·ªác t·∫°m th·ªùi (Temporary situations)"
        ],
        "signals": ["now", "at the moment", "right now", "currently"]
    },
    "Hi·ªán t·∫°i ho√†n th√†nh (Present Perfect)": {
        "key": "present_perfect",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + have/has + V3",
                "Ph·ªß ƒë·ªãnh": "S + have/has + not + V3",
                "Nghi v·∫•n": "Have/Has + S + V3 ?"
            }
        },
        "uses": [
            "Kinh nghi·ªám, k·∫øt qu·∫£ ƒë·∫øn hi·ªán t·∫°i (Experiences, present results)",
            "H√†nh ƒë·ªông v·ª´a x·∫£y ra/kh√¥ng r√µ th·ªùi ƒëi·ªÉm (Recent/unspecified time)"
        ],
        "signals": ["already", "yet", "ever", "never", "just", "so far", "recently", "lately"]
    },
    "Hi·ªán t·∫°i ho√†n th√†nh ti·∫øp di·ªÖn (Present Perfect Continuous)": {
        "key": "present_perfect_continuous",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + have/has + been + V-ing",
                "Ph·ªß ƒë·ªãnh": "S + have/has + not + been + V-ing",
                "Nghi v·∫•n": "Have/Has + S + been + V-ing ?"
            }
        },
        "uses": [
            "Nh·∫•n m·∫°nh ƒë·ªô d√†i h√†nh ƒë·ªông t·ªõi hi·ªán t·∫°i (Duration up to now)",
            "H√†nh ƒë·ªông v·ª´a d·ª´ng l·∫°i v√† c√≤n d·∫•u v·∫øt (Recent activity)"
        ],
        "signals": ["for", "since", "all day", "recently", "lately"]
    },
    "Qu√° kh·ª© ƒë∆°n (Past Simple)": {
        "key": "past_simple",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + V2/V-ed",
                "Ph·ªß ƒë·ªãnh": "S + did not + V",
                "Nghi v·∫•n": "Did + S + V ?"
            },
            "ƒê·ªông t·ª´ to be (To be)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + was/were",
                "Ph·ªß ƒë·ªãnh": "S + was/were + not",
                "Nghi v·∫•n": "Was/Were + S ?"
            },
        },
        "uses": [
            "H√†nh ƒë·ªông ƒë√£ k·∫øt th√∫c trong qu√° kh·ª© (Finished past action)",
            "Chu·ªói s·ª± ki·ªán trong qu√° kh·ª© (sequence)"
        ],
        "signals": ["yesterday", "last night/week/year", "in 2010", "ago"]
    },
    "Qu√° kh·ª© ti·∫øp di·ªÖn (Past Continuous)": {
        "key": "past_continuous",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + was/were + V-ing",
                "Ph·ªß ƒë·ªãnh": "S + was/were + not + V-ing",
                "Nghi v·∫•n": "Was/Were + S + V-ing ?"
            }
        },
        "uses": [
            "H√†nh ƒë·ªông ƒëang di·ªÖn ra t·∫°i 1 th·ªùi ƒëi·ªÉm qu√° kh·ª© (action in progress in the past)",
            "B·ªëi c·∫£nh cho h√†nh ƒë·ªông kh√°c xen v√†o (background action)"
        ],
        "signals": ["while", "at 5 pm yesterday", "when + Past Simple"]
    },
    "Qu√° kh·ª© ho√†n th√†nh (Past Perfect)": {
        "key": "past_perfect",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + had + V3",
                "Ph·ªß ƒë·ªãnh": "S + had + not + V3",
                "Nghi v·∫•n": "Had + S + V3 ?"
            }
        },
        "uses": [
            "H√†nh ƒë·ªông x·∫£y ra tr∆∞·ªõc m·ªôt th·ªùi ƒëi·ªÉm/qu√° kh·ª© kh√°c (earlier past)",
            "Nh·∫•n m·∫°nh th·ª© t·ª± s·ª± ki·ªán"
        ],
        "signals": ["before", "after", "by the time", "already"]
    },
    "Qu√° kh·ª© ho√†n th√†nh ti·∫øp di·ªÖn (Past Perfect Continuous)": {
        "key": "past_perfect_continuous",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + had + been + V-ing",
                "Ph·ªß ƒë·ªãnh": "S + had + not + been + V-ing",
                "Nghi v·∫•n": "Had + S + been + V-ing ?"
            }
        },
        "uses": [
            "Nh·∫•n m·∫°nh ƒë·ªô d√†i tr∆∞·ªõc qu√° kh·ª© (duration before a past point)"
        ],
        "signals": ["for", "since", "until", "before + Past Simple"]
    },
    "T∆∞∆°ng lai ƒë∆°n (Future Simple)": {
        "key": "future_simple",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + will + V",
                "Ph·ªß ƒë·ªãnh": "S + will not (won't) + V",
                "Nghi v·∫•n": "Will + S + V ?"
            }
        },
        "uses": [
            "Quy·∫øt ƒë·ªãnh t·ª©c th√¨, d·ª± ƒëo√°n (instant decisions, predictions)",
            "L·ªùi h·ª©a, ƒë·ªÅ ngh·ªã, y√™u c·∫ßu"
        ],
        "signals": ["tomorrow", "next week", "soon", "probably"]
    },
    "T∆∞∆°ng lai ti·∫øp di·ªÖn (Future Continuous)": {
        "key": "future_continuous",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + will be + V-ing",
                "Ph·ªß ƒë·ªãnh": "S + will not be + V-ing",
                "Nghi v·∫•n": "Will + S + be + V-ing ?"
            }
        },
        "uses": [
            "H√†nh ƒë·ªông s·∫Ω ƒëang di·ªÖn ra t·∫°i th·ªùi ƒëi·ªÉm t∆∞∆°ng lai (action in progress in the future)"
        ],
        "signals": ["at this time tomorrow", "at 5 pm next Monday"]
    },
    "T∆∞∆°ng lai ho√†n th√†nh (Future Perfect)": {
        "key": "future_perfect",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + will have + V3",
                "Ph·ªß ƒë·ªãnh": "S + will not have + V3",
                "Nghi v·∫•n": "Will + S + have + V3 ?"
            }
        },
        "uses": [
            "Ho√†n th√†nh tr∆∞·ªõc m·ªôt m·ªëc t∆∞∆°ng lai (completed before a future time)"
        ],
        "signals": ["by tomorrow", "by next year", "by the time"]
    },
    "T∆∞∆°ng lai ho√†n th√†nh ti·∫øp di·ªÖn (Future Perfect Continuous)": {
        "key": "future_perfect_continuous",
        "summary": {
            "ƒê·ªông t·ª´ th∆∞·ªùng (Verb)": {
                "Kh·∫≥ng ƒë·ªãnh": "S + will have been + V-ing",
                "Ph·ªß ƒë·ªãnh": "S + will not have been + V-ing",
                "Nghi v·∫•n": "Will + S + have been + V-ing ?"
            }
        },
        "uses": [
            "Nh·∫•n m·∫°nh ƒë·ªô d√†i t·ªõi m·ªôt m·ªëc t∆∞∆°ng lai (duration up to a future point)"
        ],
        "signals": ["for", "since", "by the time + future"]
    },
}

# ==========================
# APP UI
# ==========================
st.title("üìò Luy·ªán 12 th√¨ Ti·∫øng Anh")

tense_name = st.selectbox("üëâ Ch·ªçn th√¨ mu·ªën h·ªçc:", list(TENSES.keys()))
tense = TENSES[tense_name]
tense_key = tense["key"]

# --------- B·∫¢NG T√ìM T·∫ÆT (ch·ªâ hi·ªán c·ªßa th√¨ ƒë√£ ch·ªçn)
with st.expander("üìñ B·∫£ng t√≥m t·∫Øt (Summary) ‚Äì ch·ªâ th√¨ ƒëang ch·ªçn", expanded=True):
    for group, formulas in tense["summary"].items():
        st.markdown(f"**{group}:**")
        for form, formula in formulas.items():
            st.write(f"- {form}: {formula}")

st.divider()

# --------- KI·ªÇM TRA C√îNG TH·ª®C (m·ªói d√≤ng c√≥ n√∫t ki·ªÉm tra ri√™ng, kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
st.subheader("‚úçÔ∏è Ki·ªÉm tra c√¥ng th·ª©c (Formulas)")

for group, formulas in tense["summary"].items():
    st.markdown(f"**{group}**")
    for form, correct in formulas.items():
        key_input = f"formula-{tense_key}-{group}-{form}"
        key_btn = f"btn-formula-{tense_key}-{group}-{form}"
        user_input = st.text_input(f"{form} ‚Äì nh·∫≠p c√¥ng th·ª©c (Enter formula):", key=key_input)
        if st.button(f"Ki·ªÉm tra {form}", key=key_btn):
            if norm(user_input) == norm(correct):
                st.success("‚úÖ Ch√≠nh x√°c!")
            else:
                st.error(f"‚ùå Sai r·ªìi! ƒê√∫ng l√†: {correct}")

st.divider()

# --------- KI·ªÇM TRA C√ÅCH D√ôNG
st.subheader("üìå C√°ch d√πng (Uses)")
for i, use in enumerate(tense["uses"], 1):
    key_use_in = f"use-{tense_key}-{i}"
    key_use_btn = f"btn-use-{tense_key}-{i}"
    user_use = st.text_input(f"C√°ch d√πng {i} (Use {i}):", key=key_use_in)

    if st.button(f"Ki·ªÉm tra c√°ch d√πng {i}", key=key_use_btn):
        nu, na = norm(user_use), norm(use)

        # ‚úÖ ƒë√∫ng n·∫øu 1 trong 2 ch·ª©a nhau
        if nu in na or na in nu:
            st.success("‚úÖ Ch√≠nh x√°c!")
        else:
            st.error(f"‚ùå Sai r·ªìi! G·ª£i √Ω: {use}")
st.divider()

# --------- KI·ªÇM TRA D·∫§U HI·ªÜU NH·∫¨N BI·∫æT
st.subheader("üîë D·∫•u hi·ªáu nh·∫≠n bi·∫øt (Signal words)")
for i, sig in enumerate(tense["signals"], 1):
    key_sig_in = f"sig-{tense_key}-{i}"
    key_sig_btn = f"btn-sig-{tense_key}-{i}"
    user_sig = st.text_input(f"D·∫•u hi·ªáu {i} (Signal {i}):", key=key_sig_in)
    if st.button(f"Ki·ªÉm tra d·∫•u hi·ªáu {i}", key=key_sig_btn):
        if norm(user_sig) == norm(sig):
            st.success("‚úÖ Ch√≠nh x√°c!")
        else:
            st.error(f"‚ùå Sai r·ªìi! ƒê√∫ng l√†: {sig}")

st.divider()

# --------- KI·ªÇM TRA V√ç D·ª§ (t·ª± ƒë·ªông nh·∫≠n di·ªán theo th√¨) ---------
st.subheader("üß™ Ki·ªÉm tra v√≠ d·ª• (Examples)")

for group in tense["summary"].keys():
    # x√°c ƒë·ªãnh group_key cho validator
    group_key = "tobe" if "to be" in group.lower() else "verb"

    st.markdown(f"**{group}**")
    for form in ["Kh·∫≥ng ƒë·ªãnh", "Ph·ªß ƒë·ªãnh", "Nghi v·∫•n"]:
        key_ex_in = f"ex-{tense_key}-{group_key}-{form}"
        key_ex_btn = f"btn-ex-{tense_key}-{group_key}-{form}"
        example = st.text_input(f"V√≠ d·ª• {form} ({form} example):", key=key_ex_in, placeholder="Nh·∫≠p c√¢u v√≠ d·ª• c·ªßa b·∫°n...")
        if st.button(f"Ki·ªÉm tra v√≠ d·ª• {form}", key=key_ex_btn):
            ok, hint = validate_example(tense_key, group_key, form, example)
            if ok:
                st.success("‚úÖ C√≥ v·∫ª ƒë√∫ng th√¨ n√†y!")
            else:
                st.error(f"‚ùå Ch∆∞a kh·ªõp d·∫•u hi·ªáu th√¨. G·ª£i √Ω: {hint}")

# G·ª£i √Ω nh·ªè ·ªü cu·ªëi
st.info("üí° L∆∞u √Ω: Tr√¨nh ki·ªÉm tra v√≠ d·ª• d√πng lu·∫≠t nh·∫≠n d·∫°ng ƒë∆°n gi·∫£n (tr·ª£ ƒë·ªông t·ª´, V-ing/V-ed/V3...). B·∫°n c·ª© t·∫≠p trung ƒë√∫ng **c√¥ng th·ª©c** v√† **d·∫•u hi·ªáu** l√† ·ªïn nh√©!")
